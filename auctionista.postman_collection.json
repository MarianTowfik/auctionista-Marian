{
	"info": {
		"_postman_id": "a450b706-46ae-4296-9a65-7368b2adbcd1",
		"name": "auctionista",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost:3000/data/items",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c6d4fe60-d35d-4563-8022-6c5c0bb4bcb8",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Your test name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.affectedRows).to.eql(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "\n    \n    {\n        \"item_name\": \"alvedon\",\n        \"seller_id\": 17,\n        \"item_desc\": \"a cure for your cold\",\n        \"item_img\": \"http://dummyimage.com/222x148.bmp/dddddd/000000\",\n        \"reserved_price\": 44,\n        \"auction_start\": \"2020-03-16 22:43:00\",\n        \"auction_end\": \"2020-05-16 21:59:00\"\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/data/items",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"data",
						"items"
					]
				},
				"description": "1,2,7 user story"
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/data/3_ongoing_auctions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fe4d48c0-852a-4a87-8039-5563685fc0d4",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array')",
							"});",
							"",
							"pm.test(\"Response objects should all contain exactly, name and auction_end\", function () {",
							"    let jsonData = pm.response.json();",
							"    for(let obj of jsonData){",
							"        pm.expect(obj).to.have.any.keys('item_name','auction_end');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/data/3_ongoing_auctions",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"data",
						"3_ongoing_auctions"
					]
				},
				"description": "user story 3"
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/data/bids",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"bid_item\": 34,\n        \"bid_user\": 97,\n        \"bid_price\": 946,\n        \"bid_time\": \"2020-03-22 12:58:00\"\n   }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/data/bids",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"data",
						"bids"
					]
				},
				"description": "userstory 4"
			},
			"response": []
		},
		{
			"name": " http://localhost:3000/data/5_auction_creator",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ea1f13d0-0db9-433e-996a-e15717111792",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array')",
							"});",
							"",
							"pm.test(\"Response objects should all contain exactly, name of the auction and the creator of that auction \", function () {",
							"    let jsonData = pm.response.json();",
							"    for(let obj of jsonData){",
							"        pm.expect(obj).to.have.any.keys('item_name','user_name');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/data/5_auction_creator",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"data",
						"5_auction_creator"
					]
				},
				"description": "get user story 5"
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/data/6_latest_bid",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d587a2c-e253-4515-857a-e3e5340c8119",
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array')",
							"});",
							"",
							"pm.test(\"Response objects should all contain exactly, name of the auction relevant bids in published order\", function () {",
							"    let jsonData = pm.response.json();",
							"    for(let obj of jsonData){",
							"        pm.expect(obj).to.have.any.keys('item_name','bid_time', 'bid_id');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/data/6_latest_bid",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"data",
						"6_latest_bid"
					]
				},
				"description": "user story 6"
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/data/8_reserved_price_reached",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d60d6dbf-b6c0-48c9-8430-ba46fb031355",
						"exec": [
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array')",
							"});",
							"",
							"pm.test(\"Response objects should all contain exactly, name of the auction and if the reservation price is met or not\", function () {",
							"    let jsonData = pm.response.json();",
							"    for(let obj of jsonData){",
							"        pm.expect(obj).to.have.any.keys('item_name','reserve_price_met');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/data/8_reserved_price_reached",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"data",
						"8_reserved_price_reached"
					]
				},
				"description": "user story 8"
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/data/9_latest_publ_auction",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9aa7fed9-8c02-4c60-b4bb-262c48fd6062",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array')",
							"});",
							"",
							"pm.test(\"Response objects should all contain exactly, name of the auction and in recently published order\", function () {",
							"    let jsonData = pm.response.json();",
							"    for(let obj of jsonData){",
							"        pm.expect(obj).to.have.any.keys('item_name','auction_start');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/data/9_latest_publ_auction",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"data",
						"9_latest_publ_auction"
					]
				},
				"description": "user story 9"
			},
			"response": []
		},
		{
			"name": "http://localhost:3000/data/10_auction_ending_first",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1639aaab-2df4-42ce-96b6-e709d470d62b",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Response is an array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array')",
							"});",
							"",
							"pm.test(\"Response objects should all contain exactly, name of the auction and ordered by ending soonest\", function () {",
							"    let jsonData = pm.response.json();",
							"    for(let obj of jsonData){",
							"        pm.expect(obj).to.have.any.keys('item_name','auction_end');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/data/10_auction_ending_first",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"data",
						"10_auction_ending_first"
					]
				},
				"description": "user story 10"
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}